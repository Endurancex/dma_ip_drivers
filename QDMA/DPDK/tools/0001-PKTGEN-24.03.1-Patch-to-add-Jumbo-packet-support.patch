diff --git a/app/lpktgenlib.c b/app/lpktgenlib.c
index b6b83bc..1873591 100644
--- a/app/lpktgenlib.c
+++ b/app/lpktgenlib.c
@@ -13,7 +13,8 @@
 #include <pg_ether.h>
 #include <pg_inet.h>
 #include "lpktgenlib.h"
-
+#include <bus_driver.h>
+#include <bus_pci_driver.h>
 #include <stdint.h>
 #include <netinet/in.h>

diff --git a/app/meson.build b/app/meson.build
index 4acf900..1c6d257 100644
--- a/app/meson.build
+++ b/app/meson.build
@@ -35,7 +35,7 @@ deps += [cc.find_library('rte_net_i40e', dirs: [dpdk_libs_path], required: false
 deps += [cc.find_library('rte_net_ixgbe', dirs: [dpdk_libs_path], required: false)]
 deps += [cc.find_library('rte_net_ice', dirs: [dpdk_libs_path], required: false)]
 deps += [cc.find_library('rte_bus_vdev', dirs: [dpdk_libs_path], required: false)]
-
+deps += [cc.find_library('rte_net_qdma', required: true)]
 deps += [dependency('threads')]
 deps += [dependency('numa', required: true)]
 deps += [dependency('pcap', required: true)]
diff --git a/app/pktgen-cmds.c b/app/pktgen-cmds.c
index ece20c6..788e630 100644
--- a/app/pktgen-cmds.c
+++ b/app/pktgen-cmds.c
@@ -3125,19 +3125,20 @@ void
 single_set_pkt_size(port_info_t *info, uint16_t size)
 {
     pkt_seq_t *pkt = &info->seq_pkt[SINGLE_PKT];
-
+	 uint16_t pktsize = (pktgen.flags & MTU9K_SUPPORT_FLAG) ?
+	MAX_PKT_SIZE : (RTE_ETHER_MAX_LEN - RTE_ETHER_CRC_LEN);
     if (size < RTE_ETHER_CRC_LEN)
         size = RTE_ETHER_CRC_LEN;
-
     if ((size - RTE_ETHER_CRC_LEN) < MIN_PKT_SIZE)
         size = pktgen.eth_min_pkt;
-    if ((size - RTE_ETHER_CRC_LEN) > MAX_PKT_SIZE)
-        size = pktgen.eth_max_pkt;
+  if ((size - RTE_ETHER_CRC_LEN) > pktsize)
+	size = pktsize + RTE_ETHER_CRC_LEN;

     if ((pkt->ethType == RTE_ETHER_TYPE_IPV6) && (size < (MIN_v6_PKT_SIZE + RTE_ETHER_CRC_LEN)))
         size = MIN_v6_PKT_SIZE + RTE_ETHER_CRC_LEN;

     pkt->pktSize = (size - RTE_ETHER_CRC_LEN);
+	pkt->pktSize = size;

     pktgen_packet_ctor(info, SINGLE_PKT, -1);
     pktgen_packet_rate(info);
@@ -4273,6 +4274,8 @@ range_set_cos_id(port_info_t *info, char *what, uint8_t id)
 void
 range_set_pkt_size(port_info_t *info, char *what, uint16_t size)
 {
+ uint32_t pktsize = (pktgen.flags & MTU9K_SUPPORT_FLAG) ?
+ MAX_9K_SIZE : RTE_ETHER_MAX_LEN;
     if (!strcmp(what, "inc") || !strcmp(what, "increment")) {
         if (size > pktgen.eth_max_pkt)
             size = pktgen.eth_max_pkt;
@@ -4280,8 +4283,8 @@ range_set_pkt_size(port_info_t *info, char *what, uint16_t size)
     } else {
         if (size < pktgen.eth_min_pkt)
             size = MIN_PKT_SIZE;
-        else if (size > pktgen.eth_max_pkt)
-            size = MAX_PKT_SIZE;
+      else if (size > pktsize)
+      size = pktsize;
         else
             size -= RTE_ETHER_CRC_LEN;

diff --git a/app/pktgen-constants.h b/app/pktgen-constants.h
index 6e685ab..47679b8 100644
--- a/app/pktgen-constants.h
+++ b/app/pktgen-constants.h
@@ -19,7 +19,7 @@ enum {
     MAX_PKT_TX_BURST     = 128, /* Used to create Max array sizes */
     DEFAULT_PKT_RX_BURST = 64,  /* Increasing this number consumes memory very fast */
     DEFAULT_PKT_TX_BURST = 64,  /* Increasing this number consumes memory very fast */
-    DEFAULT_RX_DESC      = (MAX_PKT_RX_BURST * 8),
+    DEFAULT_RX_DESC      = (MAX_PKT_RX_BURST * 8 * 2),
     DEFAULT_TX_DESC      = (MAX_PKT_TX_BURST * 16),

     DEFAULT_MBUFS_PER_PORT_MULTIPLER = 8, /* Multipler for number of mbufs per port */
@@ -27,7 +27,7 @@ enum {
     MBUF_CACHE_SIZE                  = 128,

     DEFAULT_PRIV_SIZE = 0,
-
+    MBUF_9K_SIZE            = 9018 + RTE_PKTMBUF_HEADROOM + DEFAULT_PRIV_SIZE,
     NUM_Q = 64, /**< Number of queues per port. */
 };

diff --git a/app/pktgen-latency.c b/app/pktgen-latency.c
index 68ef958..9a69669 100644
--- a/app/pktgen-latency.c
+++ b/app/pktgen-latency.c
@@ -7,7 +7,8 @@
 /* Created 2016 by Keith Wiles @ intel.com */

 #include <stdio.h>
-
+#include <bus_driver.h>
+#include <bus_pci_driver.h>
 #include "lua_config.h"

 #include "pktgen-cmds.h"
diff --git a/app/pktgen-main.c b/app/pktgen-main.c
index da2dc5e..177ac5c 100644
--- a/app/pktgen-main.c
+++ b/app/pktgen-main.c
@@ -29,6 +29,7 @@
 #include "pktgen-log.h"
 #include "cli-functions.h"

+#include <rte_pmd_qdma.h>
 /* Offset to the mbuf dynamic field holding pktgen data. */
 int pktgen_dynfield_offset = -1;

@@ -207,8 +208,8 @@ pktgen_parse_args(int argc, char **argv)
     pktgen.mbuf_buf_size = RTE_MBUF_DEFAULT_BUF_SIZE;

     pktgen.verbose = 0;
-    while ((opt = getopt_long(argc, argvopt, "p:m:f:l:s:g:hPNGTvjtrc", lgopts, &option_index)) !=
-           EOF)
+    while ((opt = getopt_long(argc, argvopt, "p:m:f:l:s:g:hPNGTvjtr9", lgopts, &option_index)) !=
+	EOF)
         switch (opt) {
         case 't':
             pktgen.nb_txd = atoi(optarg);
@@ -319,8 +320,11 @@ pktgen_parse_args(int argc, char **argv)

         case 'h': /* print out the help message */
             pktgen_usage(prgname);
-            return -1;
-
+	return -1;
+	case '9': /* MTU 9K support */
+	 pktgen_log_info("%s: case 9... \n", __func__);
+	 pktgen.flags    |= MTU9K_SUPPORT_FLAG;
+	 break;
         case 0: /* crc-strip for all ports */
             printf(">>> Strip CRC in hardware is the default\n");
             pktgen_set_hw_strip_crc(1);
@@ -418,7 +422,8 @@ pktgen_lua_dofile(void *ld, const char *filename)
 int
 main(int argc, char **argv)
 {
-    uint32_t i;
+    uint32_t nb_ports;
+    int32_t i;
     int32_t ret;
     struct sigaction sa;
     sigset_t set;
@@ -595,13 +600,14 @@ main(int argc, char **argv)
     pktgen_stop_running();

     /* Wait for all of the cores to stop running and exit. */
-    rte_eal_mp_wait_lcore();
-
-    RTE_ETH_FOREACH_DEV(i)
-    {
-        rte_eth_dev_stop(i);
-        rte_delay_us_sleep(100 * 1000);
-    }
+	rte_eal_mp_wait_lcore();
+	nb_ports = rte_eth_dev_count_avail();
+	for (i = nb_ports-1; i >= 0; i--) {
+	if (rte_pmd_qdma_dev_remove(i))
+	printf("Failed to detach port '%d'\n", i);
+	else
+	 printf("successfully removed port '%d'\n", i);
+}

     cli_destroy();
     scrn_destroy();
diff --git a/app/pktgen-port-cfg.c b/app/pktgen-port-cfg.c
index 1e6a78d..2f39514 100644
--- a/app/pktgen-port-cfg.c
+++ b/app/pktgen-port-cfg.c
@@ -10,6 +10,9 @@
 #include <cli_scrn.h>
 #include <lua_config.h>

+#include <bus_pci_driver.h>
+#include <bus_driver.h>
+
 #include "pktgen-port-cfg.h"

 #include "pktgen.h"
@@ -94,22 +97,21 @@ pktgen_mbuf_pool_create(const char *type, uint8_t pid, uint8_t queue_id, uint32_
     struct rte_mempool *mp;
     char name[RTE_MEMZONE_NAMESIZE];
     uint64_t sz;
-
+	uint16_t mbuf_sz = (pktgen.flags & MTU9K_SUPPORT_FLAG) ?
+					MBUF_9K_SIZE : DEFAULT_MBUF_SIZE;
     snprintf(name, sizeof(name), "%-12s%u:%u", type, pid, queue_id);
-
-    sz = nb_mbufs * DEFAULT_MBUF_SIZE;
+     sz = nb_mbufs * (mbuf_sz + sizeof(struct rte_mbuf));
     sz = RTE_ALIGN_CEIL(sz + sizeof(struct rte_mempool), 1024);

     if (pktgen.verbose)
-        pktgen_log_info("    Create: '%-*s' - Memory used (MBUFs %6u x size %6u) = %6lu KB", 16,
-                        name, nb_mbufs, DEFAULT_MBUF_SIZE, sz / 1024);
-
+      pktgen_log_info("    Create: '%-*s' - Memory used (MBUFs %6u x size %6u) = %6lu KB", 16,
+	name, nb_mbufs, mbuf_sz,  sizeof(struct rte_mbuf));
     pktgen.mem_used += sz;
     pktgen.total_mem_used += sz;

     /* create the mbuf pool */
-    mp = rte_pktmbuf_pool_create(name, nb_mbufs, cache_size, DEFAULT_PRIV_SIZE, DEFAULT_MBUF_SIZE,
-                                 socket_id);
+  mp = rte_pktmbuf_pool_create(name, nb_mbufs, cache_size, DEFAULT_PRIV_SIZE, mbuf_sz,
+		socket_id);
     if (mp == NULL)
         pktgen_log_panic(
             "Cannot create mbuf pool (%s) port %d, queue %d, nb_mbufs %d, socket_id %d: %s", name,
@@ -190,7 +192,8 @@ pktgen_config_ports(void)
         pg_port_matrix_dump(pktgen.l2p);

         pktgen_log_info(">>>> Configuring %d ports, MBUF Size %d, MBUF Cache Size %d",
-                        pktgen.nb_ports, DEFAULT_MBUF_SIZE, MBUF_CACHE_SIZE);
+	 pktgen.nb_ports, (pktgen.flags & MTU9K_SUPPORT_FLAG) ? MBUF_9K_SIZE :
+		DEFAULT_MBUF_SIZE, MBUF_CACHE_SIZE);
     }

     /* For each lcore setup each port that is handled by that lcore. */
@@ -315,9 +318,9 @@ pktgen_config_ports(void)

         pktgen.mem_used = 0;

-        if ((ret = rte_eth_dev_set_mtu(pid, pktgen.eth_mtu)) < 0)
-            pktgen_log_panic("Cannot set MTU %u on port %u, (%d)%s", pktgen.eth_mtu, pid, -ret,
-                             rte_strerror(-ret));
+	//if ((ret = rte_eth_dev_set_mtu(pid, pktgen.eth_mtu)) < 0)
+	//  pktgen_log_panic("Cannot set MTU %u on port %u, (%d)%s", pktgen.eth_mtu, pid, -ret,
+	//                 rte_strerror(-ret));

         for (int q = 0; q < rt.rx; q++) {
             struct rte_eth_rxconf rxq_conf;
diff --git a/app/pktgen-port-cfg.h b/app/pktgen-port-cfg.h
index 130619f..8f19955 100644
--- a/app/pktgen-port-cfg.h
+++ b/app/pktgen-port-cfg.h
@@ -412,7 +412,7 @@ rte_get_rx_capa_list(uint64_t rx_capa, char *buf, size_t len)
                     {RTE_ETH_RX_OFFLOAD_TIMESTAMP, _(TIMESTAMP)},
                     {RTE_ETH_RX_OFFLOAD_SECURITY, _(SECURITY)},
                     {RTE_ETH_RX_OFFLOAD_KEEP_CRC, _(KEEP_CRC)},
-                    {RTE_ETH_RX_OFFLOAD_SCTP_CKSUM, _(SCTP_CKSUM)},
+					{RTE_ETH_RX_OFFLOAD_SCTP_CKSUM, _(SCTP_CKSUM)},
                     {RTE_ETH_RX_OFFLOAD_OUTER_UDP_CKSUM, _(OUTER_UDP_CKSUM)},
                     {RTE_ETH_RX_OFFLOAD_RSS_HASH, _(RSS_HASH)},
                     {RTE_ETH_RX_OFFLOAD_BUFFER_SPLIT, _(BUFFER_SPLIT)}};
diff --git a/app/pktgen-range.c b/app/pktgen-range.c
index 2c43e00..1c84f8a 100644
--- a/app/pktgen-range.c
+++ b/app/pktgen-range.c
@@ -744,7 +744,8 @@ pktgen_range_setup(port_info_t *info)
     range->pkt_size     = MIN_PKT_SIZE;
     range->pkt_size_inc = 0;
     range->pkt_size_min = MIN_PKT_SIZE;
-    range->pkt_size_max = MAX_PKT_SIZE;
+    range->pkt_size_max = (pktgen.flags & MTU9K_SUPPORT_FLAG) ?
+	MAX_PKT_SIZE : (RTE_ETHER_MAX_LEN - RTE_ETHER_CRC_LEN);

     range->vxlan_gid     = info->seq_pkt[SINGLE_PKT].group_id;
     range->vxlan_gid_inc = 0;
diff --git a/app/pktgen-rate.c b/app/pktgen-rate.c
index 1dbd654..400c75b 100644
--- a/app/pktgen-rate.c
+++ b/app/pktgen-rate.c
@@ -7,7 +7,8 @@
 /* Created 2020 by Keith Wiles @ intel.com */

 #include <stdio.h>
-
+#include <bus_driver.h>
+#include <bus_pci_driver.h>
 #include "lua_config.h"

 #include "pktgen-cmds.h"
diff --git a/app/pktgen-stats.c b/app/pktgen-stats.c
index 798f11f..4070529 100644
--- a/app/pktgen-stats.c
+++ b/app/pktgen-stats.c
@@ -7,7 +7,8 @@
 /* Created 2010 by Keith Wiles @ intel.com */

 #include <stdio.h>
-
+#include <bus_pci_driver.h>
+#include <bus_driver.h>
 #include <pg_delay.h>
 #include <lua_config.h>

diff --git a/app/pktgen.c b/app/pktgen.c
index 6598399..4fac1c2 100644
--- a/app/pktgen.c
+++ b/app/pktgen.c
@@ -76,6 +76,7 @@ pktgen_wire_size(port_info_t *info)
         } else
             size = info->seq_pkt[SINGLE_PKT].pktSize + PKT_OVERHEAD_SIZE;
     }
+ size -= (PKT_PREAMBLE_SIZE + INTER_FRAME_GAP + RTE_ETHER_CRC_LEN);
     return size;
 }

@@ -283,7 +284,6 @@ pktgen_send_burst(port_info_t *info, uint16_t qid)
     struct eth_tx_buffer *mtab = info->q[qid].txbuff;
     struct rte_mbuf **pkts;
     uint32_t tap, rnd;
-
     tap = pktgen_tst_port_flags(info, PROCESS_TX_TAP_PKTS);
     rnd = pktgen_tst_port_flags(info, SEND_RANDOM_PKTS);

@@ -866,7 +866,9 @@ pktgen_setup_cb(struct rte_mempool *mp, void *opaque, void *obj, unsigned obj_id
     port_info_t *info;
     pkt_seq_t *pkt;
     uint16_t qid, idx;
-
+    uint32_t pktsize = (pktgen.flags & MTU9K_SUPPORT_FLAG) ?
+		MAX_PKT_SIZE :
+		(RTE_ETHER_MAX_LEN - RTE_ETHER_CRC_LEN);
     info = data->info;
     qid  = data->qid;

@@ -895,7 +897,7 @@ pktgen_setup_cb(struct rte_mempool *mp, void *opaque, void *obj, unsigned obj_id

     pktgen_packet_ctor(info, idx, -1);

-    rte_memcpy((uint8_t *)m->buf_addr + m->data_off, (uint8_t *)&pkt->hdr, MAX_PKT_SIZE);
+    rte_memcpy((uint8_t *)m->buf_addr + m->data_off, (uint8_t *)&pkt->hdr, pktsize);

     m->pkt_len  = pkt->pktSize;
     m->data_len = pkt->pktSize;
@@ -1097,7 +1099,7 @@ pktgen_main_receive(port_info_t *info, uint8_t lid, struct rte_mbuf **pkts_burst
 {
     uint8_t pid;
     uint16_t qid, nb_rx;
-    capture_t *capture;
+   __rte_unused    capture_t *capture;
     eth_stats_t *qstats;
     int i;

@@ -1116,9 +1118,13 @@ pktgen_main_receive(port_info_t *info, uint8_t lid, struct rte_mbuf **pkts_burst
         return;

     qstats->q_ipackets[qid] += nb_rx;
-    for (i = 0; i < nb_rx; i++)
+	for (i = 0; i < nb_rx; i++)
         qstats->q_ibytes[qid] += rte_pktmbuf_data_len(pkts_burst[i]);

+	info->pkt_sizes._64 += nb_rx;
+	rte_pktmbuf_free_bulk(pkts_burst, nb_rx);
+
+#if 0
     pktgen_tstamp_check(info, pkts_burst, nb_rx);

     /* packets are not freed in the next call. */
@@ -1134,6 +1140,7 @@ pktgen_main_receive(port_info_t *info, uint8_t lid, struct rte_mbuf **pkts_burst
     }

     rte_pktmbuf_free_bulk(pkts_burst, nb_rx);
+#endif
 }

 struct pq_info {
diff --git a/app/pktgen.h b/app/pktgen.h
index 728eecd..a67034c 100644
--- a/app/pktgen.h
+++ b/app/pktgen.h
@@ -243,8 +243,9 @@ enum {
     SOCKET0 = 0 /**< Socket ID value for allocation */
 };

+#define MAX_9K_SIZE	9018
 #define MIN_PKT_SIZE (pktgen.eth_min_pkt - RTE_ETHER_CRC_LEN)
-#define MAX_PKT_SIZE (pktgen.eth_max_pkt - RTE_ETHER_CRC_LEN)
+#define MAX_PKT_SIZE	(MAX_9K_SIZE - RTE_ETHER_CRC_LEN)

 typedef struct rte_mbuf rte_mbuf_t;

@@ -339,6 +340,7 @@ enum {                                     /* Pktgen flags bits */
        FAKE_PORTS_FLAG        = (1 << 9),  /**< Fake ports enabled */
        BLINK_PORTS_FLAG       = (1 << 10), /**< Blink the port leds */
        ENABLE_THEME_FLAG      = (1 << 11), /**< Enable theme or color support */
+							MTU9K_SUPPORT_FLAG     = (1 << 15),    /**< MTU 9K support */
        CLOCK_GETTIME_FLAG     = (1 << 12), /**< Enable clock_gettime() instead of rdtsc() */
        JUMBO_PKTS_FLAG        = (1 << 13), /**< Enable Jumbo frames */
        RESERVED_14            = (1 << 14),
diff --git a/lib/cli/cli_map.c b/lib/cli/cli_map.c
index 1018594..384c81b 100644
--- a/lib/cli/cli_map.c
+++ b/lib/cli/cli_map.c
@@ -7,7 +7,7 @@
 #include <_atoip.h>

 #include "cli.h"
-
+#include "ctype.h"
 int
 cli_map_list_search(const char *fmt, char *item, int index)
 {
diff --git a/lib/common/pg_strings.c b/lib/common/pg_strings.c
index 38fdf46..eb1c9d0 100644
--- a/lib/common/pg_strings.c
+++ b/lib/common/pg_strings.c
@@ -3,6 +3,7 @@
  */

 #include "pg_strings.h"
+#include "ctype.h"

 char *
 pg_strtrim(char *str)
